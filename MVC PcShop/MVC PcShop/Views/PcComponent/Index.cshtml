
@model PagedList.IPagedList<MVC_PcShop.Models.PcComponent>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "PcComponents";

}

<br />
<br />

<h1>Pc Components</h1>

<div class="alert alert-success"><strong>Buy pc components!</strong></div>


<p>
    <button type="button" class="btn" style="color:black;background-color:#FFEBCD" onclick="location.href='@Url.Action( "Create","PcComponent")'">
        Create new
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-laptop" viewBox="0 0 16 16">
            <path d="M13.5 3a.5.5 0 0 1 .5.5V11H2V3.5a.5.5 0 0 1 .5-.5h11zm-11-1A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2h-11zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5z" />
        </svg>
    </button>
</p>
@using (Html.BeginForm())
{
    <p>
        Pc Component: @Html.TextBox("searchString", ViewBag.CurrentFilter as string)
        Price Range: @Html.TextBox("lowerPrice", ViewBag.lowerPrice as string)  @Html.TextBox("higherPrice", ViewBag.higherPrice as string)
        <button type="submit" class="btn" style="color:black;background-color:#FFEBCD" ;>
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
            </svg>
        </button>
        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;
        <button type="button" class="btn" style="color:black;background-color:#FFEBCD" onclick="location.href='@Url.Action( "Index","MyCart")'" ;>
            <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-cart4" viewBox="0 0 16 16">
                <path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l.5 2H5V5H3.14zM6 5v2h2V5H6zm3 0v2h2V5H9zm3 0v2h1.36l.5-2H12zm1.11 3H12v2h.61l.5-2zM11 8H9v2h2V8zM8 8H6v2h2V8zM5 8H3.89l.5 2H5V8zm0 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z" />
            </svg>
        </button>
    </p>

}
<table class="table table-hover">
    <tr style="background-color :lightsalmon">
        <th>
            Picture           
        </th>
        <th>
            Category Name
        </th>
        <th>
            Type
        </th>
        <th>
            Name
        </th>
        <th>
            Manufacturer
        </th>
        <th>
            Price
        </th>
        <th></th>
    </tr>
    @foreach (var item in Model)
    {
    <tr>

    <td>
        @if (item.Image != null)
        {
            var imgSrc = $"data:image/jpg;base64,{Convert.ToBase64String(item.Image)}";
            <img src="@imgSrc" alt="@item.Name" width="100" height="100" />
        }
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Category.CategoryName)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Type)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Manufacturer)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Price)
    </td>
    <td>
        @Html.ActionLink("Buy", "Buy", "MyCart", new { id = item.ID }, null) |
        @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
        @Html.ActionLink("Details", "Details", new { id = item.ID }) |
        @Html.ActionLink("Delete", "Delete", new { id = item.ID })
    </td>
    </tr>
    }
</table>
<br />



<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, currentFilter = ViewBag.CurrentFilter, lowerPrice = ViewBag.lowerPrice, higherPrice = ViewBag.higherPrice }))
